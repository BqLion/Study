See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  13/33 tests passed
Memory:       8/8 tests passed
Timing:       19/20 tests passed

Aggregate score: 62.64%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.9K Jun  8 05:03 Percolation.java
1.8K Jun  8 05:03 PercolationStats.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Percolation.java
*-----------------------------------------------------------

% javac PercolationStats.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Percolation.java
*-----------------------------------------------------------

% custom checkstyle checks for PercolationStats.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Percolation
*-----------------------------------------------------------
Running 18 total tests.

Tests 1 through 8 create a Percolation object using your code, then repeatedly
open sites by calling open(). After each call to open(), it checks the return
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.
Tests 11 through 14 create a Percolation object using your code, then repeatedly
call the methods open(), isOpen(), isFull(), percolates(), and, numberOfOpenSites()
in random order with probabilities p = (p1, p2, p3, p4, p5). The tests stop
immediately after the system percolates.

Tests 16 through 18 test backwash.

Except as noted, a site is opened at most once.

Test 1: open predetermined list of sites using file inputs
  * filename = input6.txt
    - isFull() returns wrong value after 12 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
  * filename = input8.txt
    - isFull() returns wrong value after 23 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
  * filename = input8-no.txt
    - isFull() returns wrong value after 29 sites opened
    - student   isFull(2, 8) = true
    - reference isFull(2, 8) = false
  * filename = input10-no.txt
    - percolates() returns wrong value after 55 sites opened
    - student   percolates() = true
    - reference percolates() = false

  * filename = greeting57.txt
    - isFull() returns wrong value after 2483 sites opened
    - student   isFull(3, 44) = true
    - reference isFull(3, 44) = false
  * filename = heart25.txt
==> FAILED

Test 2: open random sites until just before system percolates
  * n = 3
  * n = 5
  * n = 10
    - isFull() returns wrong value after 30 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
  * n = 10
    - percolates() returns wrong value after 49 sites opened
    - student   percolates() = true
    - reference percolates() = false

  * n = 20
    - isFull() returns wrong value after 181 sites opened
    - student   isFull(3, 1) = true
    - reference isFull(3, 1) = false
  * n = 20
    - isFull() returns wrong value after 191 sites opened
    - student   isFull(7, 1) = true
    - reference isFull(7, 1) = false
  * n = 50
    - isFull() returns wrong value after 300 sites opened
    - student   isFull(3, 1) = true
    - reference isFull(3, 1) = false
  * n = 50
    - isFull() returns wrong value after 697 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
==> FAILED

Test 3: open predetermined sites for n = 1 and n = 2 (corner case test)
  * filename = input1.txt
  * filename = input1-no.txt
  * filename = input2.txt
  * filename = input2-no.txt
==> passed

Test 4: check predetermined sites with long percolating path
  * filename = snake13.txt
  * filename = snake101.txt
==> passed

Test 5: open every site
  * filename = input5.txt
==> passed

Test 6: open random sites until just before system percolates,
        allowing open() to be called on a site more than once
  * n = 3
  * n = 5
    - percolates() returns wrong value after 14 sites opened
    - student   percolates() = true
    - reference percolates() = false

  * n = 10
    - isFull() returns wrong value after 39 sites opened
    - student   isFull(3, 1) = true
    - reference isFull(3, 1) = false
  * n = 10
    - isFull() returns wrong value after 40 sites opened
    - student   isFull(3, 4) = true
    - reference isFull(3, 4) = false
  * n = 20
  * n = 20
    - percolates() returns wrong value after 206 sites opened
    - student   percolates() = true
    - reference percolates() = false

  * n = 50
    - isFull() returns wrong value after 1017 sites opened
    - student   isFull(2, 50) = true
    - reference isFull(2, 50) = false
  * n = 50
    - isFull() returns wrong value after 1192 sites opened
    - student   isFull(3, 1) = true
    - reference isFull(3, 1) = false
==> FAILED

Test 7: call methods with invalid arguments
  * n = 10, (row, col) = (-1, 5)
  * n = 10, (row, col) = (11, 5)
  * n = 10, (row, col) = (0, 5)
  * n = 10, (row, col) = (5, -1)
  * n = 10, (row, col) = (5, 11)
  * n = 10, (row, col) = (5, 0)
  * n = 10, (row, col) = (-2147483648, -2147483648)
  * n = 10, (row, col) = (2147483647, 2147483647)
==> passed

Test 8: call constructor with invalid argument
  * n = -10
  * n = -1
  * n = 0
==> passed

Test 9: create multiple Percolation objects at the same time
        (to make sure you didn't store data in static variables)
    - isFull() returns wrong value after 36 sites opened
    - student   isFull(2, 10) = true
    - reference isFull(2, 10) = false
==> FAILED

Test 10: open predetermined list of sites using file inputs,
         but permute the order in which methods are called
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
    - isFull() returns wrong value after 23 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
    - isFull() returns wrong value after 23 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
    - isFull() returns wrong value after 23 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
    - isFull() returns wrong value after 23 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
    - isFull() returns wrong value after 23 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
    - isFull() returns wrong value after 23 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
==> FAILED

Test 11: call open(), isOpen(), and numberOfOpenSites()
         in random order until system percolates
  * n = 3, trials = 40, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 5, trials = 20, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 7, trials = 10, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 10, trials = 5, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 20, trials = 2, p = (0.4, 0.4, 0.0, 0.0, 0.3)
  * n = 50, trials = 1, p = (0.4, 0.4, 0.0, 0.0, 0.3)
==> passed

Test 12: call open() and percolates() in random order until system percolates
  * n = 3, trials = 40, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 5 sites opened
    - student   percolates() = true
    - reference percolates() = false

    - percolates() returns wrong value after 5 sites opened
    - student   percolates() = true
    - reference percolates() = false

    - failed on trial 11 of 40

  * n = 5, trials = 20, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 18 sites opened
    - student   percolates() = true
    - reference percolates() = false

    - percolates() returns wrong value after 18 sites opened
    - student   percolates() = true
    - reference percolates() = false

    - failed on trial 3 of 20

  * n = 7, trials = 10, p = (0.5, 0.0, 0.0, 0.5, 0.0)
    - percolates() returns wrong value after 23 sites opened
    - student   percolates() = true
    - reference percolates() = false

    - percolates() returns wrong value after 23 sites opened
    - student   percolates() = true
    - reference percolates() = false

    - failed on trial 1 of 10

  * n = 10, trials = 5, p = (0.5, 0.0, 0.0, 0.5, 0.0)
  * n = 20, trials = 2, p = (0.5, 0.0, 0.0, 0.5, 0.0)
  * n = 50, trials = 1, p = (0.5, 0.0, 0.0, 0.5, 0.0)
==> FAILED

Test 13: call open() and isFull() in random order until system percolates
  * n = 3, trials = 40, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 3 sites opened
    - student   isFull(3, 1) = true
    - reference isFull(3, 1) = false
    - failed on trial 10 of 40

  * n = 5, trials = 20, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 18 sites opened
    - student   isFull(3, 1) = true
    - reference isFull(3, 1) = false
    - failed on trial 1 of 20

  * n = 7, trials = 10, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 18 sites opened
    - student   isFull(2, 7) = true
    - reference isFull(2, 7) = false
    - failed on trial 1 of 10

  * n = 10, trials = 5, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 37 sites opened
    - student   isFull(3, 1) = true
    - reference isFull(3, 1) = false
    - failed on trial 1 of 5

  * n = 20, trials = 2, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 201 sites opened
    - student   isFull(6, 17) = true
    - reference isFull(6, 17) = false
    - failed on trial 1 of 2

  * n = 50, trials = 1, p = (0.5, 0.0, 0.5, 0.0, 0.0)
    - isFull() returns wrong value after 1346 sites opened
    - student   isFull(4, 49) = true
    - reference isFull(4, 49) = false
    - failed on trial 1 of 1

==> FAILED

Test 14: call all methods in random order until system percolates
  * n = 3, trials = 40, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 3 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
    - isFull() returns wrong value after 2 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
  * n = 5, trials = 20, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 12 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
    - isFull() returns wrong value after 5 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
    - percolates() returns wrong value after 11 sites opened
    - student   percolates() = true
    - reference percolates() = false

    - percolates() returns wrong value after 11 sites opened
    - student   percolates() = true
    - reference percolates() = false

    - failed on trial 7 of 20

  * n = 7, trials = 10, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 32 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
    - percolates() returns wrong value after 32 sites opened
    - student   percolates() = true
    - reference percolates() = false

    - failed on trial 1 of 10

  * n = 10, trials = 5, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - percolates() returns wrong value after 66 sites opened
    - student   percolates() = true
    - reference percolates() = false

    - percolates() returns wrong value after 66 sites opened
    - student   percolates() = true
    - reference percolates() = false

    - failed on trial 2 of 5

  * n = 20, trials = 2, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 198 sites opened
    - student   isFull(2, 20) = true
    - reference isFull(2, 20) = false
    - isFull() returns wrong value after 165 sites opened
    - student   isFull(7, 17) = true
    - reference isFull(7, 17) = false
  * n = 50, trials = 1, p = (0.2, 0.2, 0.2, 0.2, 0.2)
    - isFull() returns wrong value after 1033 sites opened
    - student   isFull(4, 50) = true
    - reference isFull(4, 50) = false
==> FAILED

Test 15: call all methods in random order until almost all sites are open,
         but with inputs not prone to backwash
  * n = 3
    - isFull() returns wrong value after 4 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
    - failed on trial 4 of 40

  * n = 5
    - isFull() returns wrong value after 14 sites opened
    - student   isFull(3, 1) = true
    - reference isFull(3, 1) = false
    - failed on trial 1 of 20

  * n = 7
    - isFull() returns wrong value after 25 sites opened
    - student   isFull(2, 6) = true
    - reference isFull(2, 6) = false
    - failed on trial 1 of 10

  * n = 10
    - isFull() returns wrong value after 54 sites opened
    - student   isFull(4, 1) = true
    - reference isFull(4, 1) = false
    - failed on trial 1 of 5

  * n = 20
    - isFull() returns wrong value after 167 sites opened
    - student   isFull(3, 1) = true
    - reference isFull(3, 1) = false
    - failed on trial 1 of 2

  * n = 50
    - isFull() returns wrong value after 814 sites opened
    - student   isFull(5, 1) = true
    - reference isFull(5, 1) = false
    - failed on trial 1 of 1

==> FAILED

Test 16: check for backwash with predetermined sites
  * filename = input20.txt
    - isFull() returns wrong value after 204 sites opened
    - student   isFull(9, 5) = true
    - reference isFull(9, 5) = false
  * filename = input10.txt
    - isFull() returns wrong value after 56 sites opened
    - student   isFull(9, 1) = true
    - reference isFull(9, 1) = false
  * filename = input50.txt
    - isFull() returns wrong value after 1347 sites opened
    - student   isFull(9, 3) = true
    - reference isFull(9, 3) = false
  * filename = jerry47.txt
    - isFull() returns wrong value after 396 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
  * filename = sedgewick60.txt
    - isFull() returns wrong value after 1163 sites opened
    - student   isFull(10, 60) = true
    - reference isFull(10, 60) = false
  * filename = wayne98.txt
    - isFull() returns wrong value after 3005 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
==> FAILED

Test 17: check for backwash with predetermined sites that have
         multiple percolating paths
  * filename = input3.txt
    - isFull() returns wrong value after 4 sites opened
    - student   isFull(3, 1) = true
    - reference isFull(3, 1) = false
  * filename = input4.txt
    - isFull() returns wrong value after 7 sites opened
    - student   isFull(4, 4) = true
    - reference isFull(4, 4) = false
  * filename = input7.txt
    - isFull() returns wrong value after 12 sites opened
    - student   isFull(6, 1) = true
    - reference isFull(6, 1) = false
==> FAILED

Test 18: call all methods in random order until all sites are open,
         allowing isOpen() to be called on a site more than once
         (these inputs are prone to backwash)
  * n = 3
    - isFull() returns wrong value after 5 sites opened
    - student   isFull(2, 1) = true
    - reference isFull(2, 1) = false
    - failed on trial 4 of 40

  * n = 5
    - isFull() returns wrong value after 15 sites opened
    - student   isFull(5, 4) = true
    - reference isFull(5, 4) = false
    - failed on trial 1 of 20

  * n = 7
    - isFull() returns wrong value after 20 sites opened
    - student   isFull(5, 1) = true
    - reference isFull(5, 1) = false
    - failed on trial 3 of 10

  * n = 10
    - isFull() returns wrong value after 53 sites opened
    - student   isFull(9, 10) = true
    - reference isFull(9, 10) = false
    - failed on trial 1 of 5

  * n = 20
    - isFull() returns wrong value after 167 sites opened
    - student   isFull(7, 20) = true
    - reference isFull(7, 20) = false
    - failed on trial 1 of 2

  * n = 50
    - isFull() returns wrong value after 1227 sites opened
    - student   isFull(8, 49) = true
    - reference isFull(8, 49) = false
    - failed on trial 1 of 1

==> FAILED


Total: 6/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Percolation)
********************************************************************************

Testing correctness of PercolationStats
*-----------------------------------------------------------
Running 15 total tests.

Test 1: check that methods in PercolationStats do not print to standard output
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 2: check that mean() returns value in expected range
  * n =   2, trials = 10000
    - student PercolationStats mean()     = 4586.335100
    - true mean                           = 0.6666666666666666
    - 99.99% confidence interval          = [0.662284, 0.671050]
    - a correct solution will fail this test by bad luck 1 time in 10,000


  * n =   5, trials = 10000
    - student PercolationStats mean()     = 4510.294288
    - true mean                           = 0.5939914915553629
    - 99.99% confidence interval          = [0.590174, 0.597809]
    - a correct solution will fail this test by bad luck 1 time in 10,000


  * n =  10, trials = 10000
    - student PercolationStats mean()     = 4489.440790
    - true mean                           = 0.5904
    - 99.99% confidence interval          = [0.587665, 0.593135]
    - a correct solution will fail this test by bad luck 1 time in 10,000


  * n =  25, trials = 10000
    - student PercolationStats mean()     = 4500.180286
    - true mean                           = 0.5917
    - 99.99% confidence interval          = [0.590140, 0.593260]
    - a correct solution will fail this test by bad luck 1 time in 10,000


==> FAILED

Test 3: check that stddev() returns value in expected range
  * n =   2, trials = 10000
    - student PercolationStats stddev() = 2634.972664
    - true stddev                       = 0.117851
    - 99.99% confidence interval        = [0.114620, 0.121104]
    - a correct solution will fail this test by bad luck 1 time in 10,000

  * n =   5, trials = 10000
    - student PercolationStats stddev() = 2606.876505
    - true stddev                       = 0.102653
    - 99.99% confidence interval        = [0.099839, 0.105487]
    - a correct solution will fail this test by bad luck 1 time in 10,000

  * n =  10, trials = 10000
    - student PercolationStats stddev() = 2599.520918
    - true stddev                       = 0.073553
    - 99.99% confidence interval        = [0.071536, 0.075583]
    - a correct solution will fail this test by bad luck 1 time in 10,000

  * n =  25, trials = 10000
    - student PercolationStats stddev() = 2600.480626
    - true stddev                       = 0.041952
    - 99.99% confidence interval        = [0.040802, 0.043110]
    - a correct solution will fail this test by bad luck 1 time in 10,000

==> FAILED

Test 4: check that PercolationStats creates trials Percolation objects, each of size n-by-n
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 5: check that PercolationStats calls open() until system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 6: check that PercolationStats does not call open() after system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 7: check that mean() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
    - PercolationStats mean = 5.1057500000000005
    - total calls to open() / (n*n*T) = 0.60475

  * n =  50, trials =  20
    - PercolationStats mean = 9.362680000000001
    - total calls to open() / (n*n*T) = 0.59114

  * n = 100, trials =  50
    - PercolationStats mean = 22.806866
    - total calls to open() / (n*n*T) = 0.590316

  * n =  64, trials = 150
    - PercolationStats mean = 67.79151041666667
    - total calls to open() / (n*n*T) = 0.5942008463541667

==> FAILED

Test 8: check that stddev() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
    - student PercolationStats stddev()                  = 2.6690640915871615
    - anticipated sample stddev   from intercepted calls = 0.03420120205814734
    - anticipated sample variance from intercepted calls = 0.0011697222222222217
  * n =  50, trials =  20
    - student PercolationStats stddev()                  = 5.185461635075715
    - anticipated sample stddev   from intercepted calls = 0.0220832777887418
    - anticipated sample variance from intercepted calls = 4.8767115789473685E-4
  * n = 100, trials =  50
    - student PercolationStats stddev()                  = 13.10531973451146
    - anticipated sample stddev   from intercepted calls = 0.015908850572263614
    - anticipated sample variance from intercepted calls = 2.530915265306123E-4
  * n =  64, trials = 150
    - student PercolationStats stddev()                  = 39.23022540525452
    - anticipated sample stddev   from intercepted calls = 0.023121415371360574
    - anticipated sample variance from intercepted calls = 5.34599848774989E-4
==> FAILED

Test 9: check that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()
  * n =  20, trials =  10
    - PercolationStats confidence low  = 3.792231839909676
    - PercolationStats confidence high = 6.107268160090324
    - PercolationStats mean            = 4.94975
    - PercolationStats stddev          = 2.641111521584131
    - T                                = 10
    - student T                        = 10
    - mean - 1.96 * stddev / sqrt(T)   = 3.3127721193071125
    - mean + 1.96 * stddev / sqrt(T)   = 6.586727880692887

  * n =  50, trials =  20
    - PercolationStats confidence low  = 8.105832008636593
    - PercolationStats confidence high = 11.12664799136341
    - PercolationStats mean            = 9.616240000000001
    - PercolationStats stddev          = 5.449080270670503
    - T                                = 20
    - student T                        = 20
    - mean - 1.96 * stddev / sqrt(T)   = 7.22807527558585
    - mean + 1.96 * stddev / sqrt(T)   = 12.004404724414153

  * n = 100, trials =  50
    - PercolationStats confidence low  = 20.359317004533924
    - PercolationStats confidence high = 25.49747099546607
    - PercolationStats mean            = 22.928393999999997
    - PercolationStats stddev          = 13.107535691153439
    - T                                = 50
    - student T                        = 50
    - mean - 1.96 * stddev / sqrt(T)   = 19.295170470231152
    - mean + 1.96 * stddev / sqrt(T)   = 26.561617529768842

  * n =  64, trials = 150
    - PercolationStats confidence low  = 58.178819004373054
    - PercolationStats confidence high = 77.36641537062695
    - PercolationStats mean            = 67.7726171875
    - PercolationStats stddev          = 39.15835993113042
    - T                                = 150
    - student T                        = 150
    - mean - 1.96 * stddev / sqrt(T)   = 61.50597445579297
    - mean + 1.96 * stddev / sqrt(T)   = 74.03925991920704

==> FAILED

Test 10: check that exception is thrown if either n or trials is out of bounds
  * n = -23, trials =  42
  * n =  23, trials =   0
    - fails to throw an exception when calling constructor with invalid arguments

  * n = -42, trials =   0
    - fails to throw an exception when calling constructor with invalid arguments

  * n =  42, trials =  -1
    - throws wrong exception when calling constructor with invalid arguments
    - throws a java.lang.NegativeArraySizeException
    - should throw a java.lang.IllegalArgumentException

  * n = -2147483648, trials = -2147483648
    - throws wrong exception when calling constructor with invalid arguments
    - throws a java.lang.NegativeArraySizeException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11: create two PercolationStats objects at the same time and check mean()
         (to make sure you didn't store data in static variables)
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5
    - PercolationStats object 1 mean = 5.06064
    - total calls to open() / (n1*n1*T1)  = 0.59032

  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10
    - PercolationStats object 1 mean = 2.8133600000000003
    - total calls to open() / (n1*n1*T1)  = 0.6020800000000001

  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10
    - PercolationStats object 1 mean = 4.9377200000000006
    - total calls to open() / (n1*n1*T1)  = 0.5960799999999999

  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10
    - PercolationStats object 1 mean = 4.7899199999999995
    - total calls to open() / (n1*n1*T1)  = 0.57616

  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100
    - PercolationStats object 1 mean = 4.7735199999999995
    - total calls to open() / (n1*n1*T1)  = 0.58556

  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10
    - PercolationStats object 1 mean = 45.13213333333333
    - total calls to open() / (n1*n1*T1)  = 0.5848

==> FAILED

Test 12: check that the methods return the same value, regardless of
         the order in which they are called
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 13: check that no calls to StdRandom.setSeed()
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 14: check distribution of number of sites opened until percolation
  * n = 2, trials = 100000
    - mean() must return a value between 0.0 and 1.0
    - mean() =  1.25

  * n = 3, trials = 100000
    - mean() must return a value between 0.0 and 1.0
    - mean() =  1.2222222222222223

  * n = 4, trials = 100000
    - mean() must return a value between 0.0 and 1.0
    - mean() =  1.5625

==> FAILED

Test 15: check that each site is opened the expected number of times
  * n = 2, trials = 100000
  * n = 3, trials = 100000
  * n = 4, trials = 100000
==> passed


Total: 7/15 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Percolation)
********************************************************************************

Analyzing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check memory usage as a function of T trials for n = 100
            (max allowed: 8*T + 128 bytes)

                 T        bytes
--------------------------------------------
=> passed       16          192         
=> passed       32          320         
=> passed       64          576         
=> passed      128         1088         
==> 4/4 tests passed


Estimated student memory = 8.00 T + 64.00   (R^2 = 1.000)

Total: 4/4 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference Percolation)
********************************************************************************

Timing PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1: count calls to StdStats.mean() and StdStats.stddev()
  * n =  20, trials =  10
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 3
    - number of reference calls to StdStats.mean() = 1

    - calls StdStats.stddev() the wrong number of times
    - number of student   calls to StdStats.stddev() = 3
    - number of reference calls to StdStats.stddev() = 1

  * n =  50, trials =  20
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 3
    - number of reference calls to StdStats.mean() = 1

    - calls StdStats.stddev() the wrong number of times
    - number of student   calls to StdStats.stddev() = 3
    - number of reference calls to StdStats.stddev() = 1

  * n = 100, trials =  50
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 3
    - number of reference calls to StdStats.mean() = 1

    - calls StdStats.stddev() the wrong number of times
    - number of student   calls to StdStats.stddev() = 3
    - number of reference calls to StdStats.stddev() = 1

  * n =  64, trials = 150
    - calls StdStats.mean() the wrong number of times
    - number of student   calls to StdStats.mean() = 3
    - number of reference calls to StdStats.mean() = 1

    - calls StdStats.stddev() the wrong number of times
    - number of student   calls to StdStats.stddev() = 3
    - number of reference calls to StdStats.stddev() = 1

==> FAILED

Test 2: count calls to methods in StdRandom
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 3: count calls to methods in Percolation
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 4: Call PercolationStats methods with trials = 3 and values of n that go up
        by a factor of sqrt(2). The test passes when n reaches 2,896.

     The approximate order-of-growth is n ^ (log ratio)

         n  seconds log ratio
     ------------------------
       724     0.14       2.6
      1024     0.30       2.3
      1448     0.89       3.1
      2048     2.17       2.6
      2896     4.97       2.4
==> passed


Total: 3/4 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check that total memory <= 17 n^2 + 128 n + 1024 bytes

                 n        bytes
--------------------------------------------
=> passed       64        37040         
=> passed      256       590000         
=> passed      512      2359472         
=> passed     1024      9437360         
==> 4/4 tests passed


Estimated student memory = 9.00 n^2 + 0.00 n + 176.00   (R^2 = 1.000)


Test 2 (bonus): check that total memory <= 11 n^2 + 128 n + 1024 bytes
   -  bonus available only if solution passes backwash correctness test
==> FAILED


Total: 4/4 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Percolation
*-----------------------------------------------------------
Running 16 total tests.

Test 1a-1e: Creates an n-by-n percolation system; open sites at random until
            the system percolates, interleaving calls to percolates() and open().
            Count calls to connected(), union() and find().

                                       2 * connected()
                 n       union()              + find()        constructor
-----------------------------------------------------------------------------------
=> passed       16          210                   306                   1         
=> passed       32          616                  1066                   1         
=> passed       64         2893                  4770                   1         
=> passed      128        11096                 18872                   1         
=> passed      256        45248                 76704                   1         
=> passed      512       183378                309432                   1         
=> passed     1024       740508               1244632                   1         
==> 7/7 tests passed


If one of the values in the table violates the performance limits
the factor by which you failed the test appears in parentheses.
For example, (9.6x) in the union() column indicates that it uses
9.6x too many calls.


Tests 2a-2f: Check whether the number of calls to union(), connected(), and find()
             is a constant per call to open(), isOpen(), isFull(), and percolates().
             The table shows the maximum number of union(), connected(), and
             find() calls made during a single call to open(), isOpen(), isFull(),
             and percolates().

                 n     per open()      per isOpen()    per isFull()    per percolates() 
---------------------------------------------------------------------------------------------
=> passed       16        3               0               1               1         
=> passed       32        4               0               1               1         
=> passed       64        4               0               1               1         
=> passed      128        4               0               1               1         
=> passed      256        4               0               1               1         
=> passed      512        4               0               1               1         
=> passed     1024        4               0               1               1         
==> 7/7 tests passed



Running time (in seconds) depends on the machine on which the script runs.


Test 3: Create an n-by-n percolation system; interleave calls to percolates()
        and open() until the system percolates. The values of n go up by a
        factor of sqrt(2). The test is passed if n >= 4096 in under 10 seconds.

     The approximate order-of-growth is n ^ (log ratio)

                        log   union-find     log
         n  seconds   ratio   operations   ratio
     -------------------------------------------
      1448     0.23     2.8      5425574     2.0
      2048     0.61     2.8     10920246     2.0
      2896     1.56     2.7     21754156     2.0
      4096     3.48     2.3     43532146     2.0
==> passed



Test 4: Create an n-by-n percolation system; interleave calls to open(),
        percolates(), isOpen(), isFull(), and numberOfOpenSites() until.
        the system percolates. The values of n go up by a factor of sqrt(2).
        The test is passed if n >= 4096 in under 10 seconds.

                        log   union-find     log
         n  seconds   ratio   operations   ratio
     -------------------------------------------
      1448     0.24     2.9      5448628     2.0
      2048     0.60     2.6     10891742     2.0
      2896     1.60     2.8     21735842     2.0
      4096     3.50     2.2     43336022     2.0
==> passed


Total: 16/16 tests passed!


================================================================



